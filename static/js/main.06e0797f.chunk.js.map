{"version":3,"sources":["../src lazy /^/.//md.*/.md$/ groupOptions: {} namespace object","js/App.js","serviceWorker.js","index.js"],"names":["map","./md/wiki/bogleg.md","./md/wiki/index.md","webpackAsyncContext","req","ids","Promise","all","slice","__webpack_require__","e","then","id","t","resolve","Error","code","keys","Object","module","exports","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","wiki","fetchWiki","bind","assertThisInitialized","shouldFetchWiki","_this2","match","url","page","setState","default","newProps","oldProps","_this3","react_default","a","createElement","BrowserRouter","basename","process","Link","to","dist_default","path","onEnter","onChange","render","routerProps","className","Component","Boolean","window","location","hostname","ReactDOM","js_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0JAAA,IAAAA,EAAA,CACAC,sBAAA,CACA,GACA,EACA,GAEAC,qBAAA,CACA,GACA,EACA,IAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAL,EAAAI,GACA,OAAAC,EAOAC,QAAAC,IAAAF,EAAAG,MAAA,GAAAR,IAAAS,EAAAC,IAAAC,KAAA,WACA,IAAAC,EAAAP,EAAA,GACA,OAAAI,EAAAI,EAAAD,EAAA,KARAN,QAAAQ,UAAAH,KAAA,WACA,IAAAD,EAAA,IAAAK,MAAA,uBAAAX,EAAA,KAEA,MADAM,EAAAM,KAAA,mBACAN,IAQAP,EAAAc,KAAA,WACA,OAAAC,OAAAD,KAAAjB,IAEAG,EAAAS,GAAA,GACAO,EAAAC,QAAAjB,sKCaekB,qBArCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAL,OAAAM,EAAA,EAAAN,CAAAO,KAAAJ,IACjBE,EAAAL,OAAAQ,EAAA,EAAAR,CAAAO,KAAAP,OAAAS,EAAA,EAAAT,CAAAG,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CAAEC,KAAS,OACxBP,EAAKQ,UAAYR,EAAKQ,UAAUC,KAAfd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAK,KACjBA,EAAKW,gBAAkBX,EAAKW,gBAAgBF,KAArBd,OAAAe,EAAA,EAAAf,QAAAe,EAAA,EAAAf,CAAAK,KAJNA,yEAOTD,GAAO,IAAAa,EAAAV,KACfhB,EAAA,GAAAA,CAAO,OAAUa,EAAMc,MAAMC,IAAM,OAAO1B,KAAK,SAAC2B,GAC9CH,EAAKI,SAAS,CAAET,KAAQQ,EAAKE,oDAIjBC,EAAUC,GACpBA,EAASN,MAAMC,MAAQI,EAASL,MAAMC,KACxCZ,KAAKM,UAAUU,oCAIV,IAAAE,EAAAlB,KACP,OACEmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,SAAUC,QAChBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,eAAT,QACAP,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,gBAAT,UACAP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CACGQ,KAAK,WACLC,QAAS7B,KAAKM,UACdwB,SAAU9B,KAAKS,gBACfsB,OAAQ,SAACC,GAAD,OAAiBb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,QAAOd,EAAAC,EAAAC,cAACH,EAAKd,MAAMC,KAAZ,mBA9B1C6B,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3B,MACvB,2DCZN4B,IAASR,OAAOZ,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.06e0797f.chunk.js","sourcesContent":["var map = {\n\t\"./md/wiki/bogleg.md\": [\n\t\t33,\n\t\t0,\n\t\t2\n\t],\n\t\"./md/wiki/index.md\": [\n\t\t34,\n\t\t0,\n\t\t3\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tvar ids = map[req];\n\tif(!ids) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\tvar id = ids[0];\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 28;\nmodule.exports = webpackAsyncContext;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport RouteHook from 'react-route-hook';\nimport '../scss/wiki.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { 'wiki' : 'div' };\n    this.fetchWiki = this.fetchWiki.bind(this);\n    this.shouldFetchWiki = this.shouldFetchWiki.bind(this);\n  }\n\n  fetchWiki(props) {\n    import('../md' + props.match.url + '.md').then((page) => { \n      this.setState({ 'wiki': page.default });\n    });\n  }\n\n  shouldFetchWiki(newProps, oldProps) {\n    if (oldProps.match.url !== newProps.match.url) {\n      this.fetchWiki(newProps)\n    }\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <Link to=\"/wiki/index\">Wiki</Link>\n          <Link to=\"/wiki/bogleg\">Bogleg</Link>\n          <RouteHook\n             path=\"/wiki/**\"\n             onEnter={this.fetchWiki} \n             onChange={this.shouldFetchWiki}\n             render={(routerProps) => <div className=\"wiki\"><this.state.wiki /></div>} \n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}